{"version":3,"file":"static/js/33.5b441c82.chunk.js","mappings":"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","sources":["components/Footer/index.tsx","components/LogoSign/index.tsx","services/drHerancaApi.ts","content/applications/user/SignUp/SignUpForm.tsx","content/applications/user/SignUp/index.tsx","services/emptyApi.ts"],"sourcesContent":["import { Box, Container, Link, Typography } from '@mui/material';\r\nimport { styled } from '@mui/material/styles';\r\n\r\nconst FooterWrapper = styled(Box)(\r\n  ({ theme }) => `\r\n        border-radius: 0;\r\n        margin: ${theme.spacing(3)} 0;\r\n`\r\n);\r\n\r\nexport default function Footer() {\r\n  return (\r\n    <FooterWrapper>\r\n      <Container maxWidth=\"lg\">\r\n        <Box\r\n          py={3}\r\n          display={{ xs: 'block', md: 'flex' }}\r\n          alignItems=\"center\"\r\n          textAlign={{ xs: 'center', md: 'left' }}\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Box>\r\n            <Typography variant=\"subtitle1\">\r\n              &copy; 2025 - Dr. Herança - Sistema de Cálculo de Inventário\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </FooterWrapper>\r\n  );\r\n}\r\n","import { Tooltip } from '@mui/material';\r\n\r\nfunction Logo() {\r\n  return (\r\n    <Tooltip title=\"Dr. Herança - Sistema de Cálculo de Inventário\" arrow\r\n    style={{\r\n      paddingTop: '20px',\r\n      paddingBottom: '20px',\r\n      paddingLeft: '10px',\r\n      paddingRight: '10px'\r\n    }}\r\n      >\r\n      <img\r\n        alt=\"Dr. Herança Logo\"\r\n        width={'80%'}\r\n        src=\"./static/images/logo/dr-heranca-logo.png\"\r\n      />\r\n    </Tooltip>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import { emptySplitApi as api } from './emptyApi';\r\nconst injectedRtkApi = api.injectEndpoints({\r\n  endpoints: (build) => ({\r\n    testTokenApiLoginTestTokenPost: build.mutation<\r\n      TestTokenApiLoginTestTokenPostApiResponse,\r\n      TestTokenApiLoginTestTokenPostApiArg\r\n    >({\r\n      query: () => ({ url: `/api/login/test-token`, method: 'POST' })\r\n    }),\r\n    createUserApiUsersPost: build.mutation<\r\n      CreateUserApiUsersPostApiResponse,\r\n      CreateUserApiUsersPostApiArg\r\n    >({\r\n      query: (queryArg) => ({\r\n        url: `/api/users/`,\r\n        method: 'POST',\r\n        body: queryArg.userCreate\r\n      })\r\n    }),\r\n    readUserMeApiUsersMeGet: build.query<\r\n      ReadUserMeApiUsersMeGetApiResponse,\r\n      ReadUserMeApiUsersMeGetApiArg\r\n    >({\r\n      query: () => ({ url: `/api/users/me` })\r\n    }),\r\n    updateUserMeApiUsersMePut: build.mutation<\r\n      UpdateUserMeApiUsersMePutApiResponse,\r\n      UpdateUserMeApiUsersMePutApiArg\r\n    >({\r\n      query: (queryArg) => ({\r\n        url: `/api/users/me`,\r\n        method: 'PUT',\r\n        body: queryArg.userUpdate\r\n      })\r\n    }),\r\n    readGeocodesApiGeocodeGet: build.query<\r\n      ReadGeocodesApiGeocodeGetApiResponse,\r\n      ReadGeocodesApiGeocodeGetApiArg\r\n    >({\r\n      query: (queryArg) => ({\r\n        url: `/api/geocode/`,\r\n        params: { skip: queryArg.skip, limit: queryArg.limit }\r\n      })\r\n    })\r\n  }),\r\n  overrideExisting: false\r\n});\r\nexport { injectedRtkApi as drHerancaApi };\r\nexport type TestTokenApiLoginTestTokenPostApiResponse =\r\n  /** status 200 Successful Response */ User;\r\nexport type TestTokenApiLoginTestTokenPostApiArg = void;\r\nexport type CreateUserApiUsersPostApiResponse =\r\n  /** status 200 Successful Response */ Token;\r\nexport type CreateUserApiUsersPostApiArg = {\r\n  userCreate: UserCreate;\r\n};\r\nexport type ReadUserMeApiUsersMeGetApiResponse =\r\n  /** status 200 Successful Response */ User;\r\nexport type ReadUserMeApiUsersMeGetApiArg = void;\r\nexport type UpdateUserMeApiUsersMePutApiResponse =\r\n  /** status 200 Successful Response */ User;\r\nexport type UpdateUserMeApiUsersMePutApiArg = {\r\n  userUpdate: UserUpdate;\r\n};\r\nexport type ReadGeocodesApiGeocodeGetApiResponse =\r\n  /** status 200 Successful Response */ Geocode[];\r\nexport type ReadGeocodesApiGeocodeGetApiArg = {\r\n  skip?: number;\r\n  limit?: number;\r\n};\r\nexport type User = {\r\n  email?: string;\r\n  industry?: string;\r\n  is_active?: boolean;\r\n  is_superuser?: boolean;\r\n  created?: string;\r\n  updated?: string;\r\n  username?: string;\r\n  plan_id?: number;\r\n  credits?: number;\r\n  id?: number;\r\n};\r\nexport type Token = {\r\n  access_token: string;\r\n  token_type: string;\r\n};\r\nexport type ValidationError = {\r\n  loc: string[];\r\n  msg: string;\r\n  type: string;\r\n};\r\nexport type HttpValidationError = {\r\n  detail?: ValidationError[];\r\n};\r\nexport type UserCreate = {\r\n  username: string;\r\n  email: string;\r\n  industry: string;\r\n  password: string;\r\n  plan_id?: number;\r\n};\r\nexport type UserUpdate = {\r\n  email?: string;\r\n  username?: string;\r\n  industry?: string;\r\n  password?: string;\r\n};\r\nexport type Geocode = {\r\n  name?: string;\r\n  email?: string;\r\n  status?: string;\r\n  geocode_id?: string;\r\n  created?: string;\r\n  available_until?: string;\r\n  geocode_total_records?: number;\r\n  user_id?: number;\r\n  summary_country_match?: number;\r\n  summary_postalcode_match?: number;\r\n  summary_state_match?: number;\r\n  summary_county_match?: number;\r\n  summary_city_match?: number;\r\n  summary_district_match?: number;\r\n  summary_street_match?: number;\r\n  summary_housenumber_match?: number;\r\n  summary_floor_match?: number;\r\n  summary_suite_match?: number;\r\n  summary_other_match?: number;\r\n  summary_total_matched_records?: number;\r\n  summary_error_match?: number;\r\n  summary_total_records?: number;\r\n  summary_total_output_matched_records?: number;\r\n  summary_total_batch_geocoding_time?: number;\r\n  summary_average_search_service_time?: number;\r\n  summary_total_number_of_retried_urls?: number;\r\n  id?: number;\r\n};\r\nexport const {\r\n  useTestTokenApiLoginTestTokenPostMutation,\r\n  useCreateUserApiUsersPostMutation,\r\n  useReadUserMeApiUsersMeGetQuery,\r\n  useUpdateUserMeApiUsersMePutMutation,\r\n  useReadGeocodesApiGeocodeGetQuery\r\n} = injectedRtkApi;\r\n","import TextField from '@mui/material/TextField';\r\nimport {\r\n  Box,\r\n  Card,\r\n  CardContent,\r\n  Grid,\r\n  Button,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  OutlinedInput\r\n} from '@mui/material';\r\nimport Logo from 'src/components/LogoSign';\r\nimport {\r\n  useCreateUserApiUsersPostMutation,\r\n  CreateUserApiUsersPostApiArg\r\n} from '../../../../services/drHerancaApi';\r\nimport { useState } from 'react';\r\nimport { User } from 'src/types'\r\nimport { useNavigate } from 'react-router';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCredentials } from 'src/features/auth/authSlice';\r\n\r\nimport { toast } from 'react-toastify';\r\n\r\ntype ErrorType = {\r\n  isError: boolean | false;\r\n  message: string | undefined;\r\n};\r\n\r\nconst SignUpForm = () => {\r\n  const [username, setUsername] = useState<string>('');\r\n  const [email, setEmail] = useState<string>('');\r\n  const [password, setPassword] = useState<string>('');\r\n  const [, setSuccessful] = useState<boolean>(false);\r\n  const [createUser] = useCreateUserApiUsersPostMutation();\r\n  const [industry, setIndustry] = useState<string>('');\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [usernameError, setUserNameError] = useState<ErrorType>({\r\n    isError: false,\r\n    message: undefined\r\n  });\r\n  const [emailError, setEmailError] = useState<ErrorType>({\r\n    isError: false,\r\n    message: undefined\r\n  });\r\n  const [passwordError, setPasswordError] = useState<ErrorType>({\r\n    isError: false,\r\n    message: undefined\r\n  });\r\n  const [industryError, setIndustryError] = useState<ErrorType>({\r\n    isError: false,\r\n    message: undefined\r\n  });\r\n\r\n  const industryOptions: Array<string> = [\r\n    'Agronegócios',\r\n    'Arquitetura, Engenharia e Construção',\r\n    'Bancos e Financeiras',\r\n    'Consultoria',\r\n    'Defesa Nacional',\r\n    'Educação / Universidade',\r\n    'Energia Elétrica',\r\n    'Governo Estadual',\r\n    'Governo Federal',\r\n    'Governo Municipal',\r\n    'Manufatura',\r\n    'Meio Ambiente',\r\n    'Mineração',\r\n    'Óleo e Gás',\r\n    'ONG',\r\n    'Saneamento',\r\n    'Segurança Pública',\r\n    'Seguros',\r\n    'Tecnologia e Revenda de Software',\r\n    'Telecomunicações',\r\n    'Transportes',\r\n    'Varejo',\r\n    'Outros',\r\n    'Não estou trabalhando no momento'\r\n  ];\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    toast.dismiss();\r\n    // const user: IUser = {\r\n    //   username,\r\n    //   email,\r\n    //   industry,\r\n    //   password\r\n    // };\r\n\r\n    // if (!validateUser(user)) return;\r\n\r\n    // const createUserApiUsersPostApiArg: CreateUserApiUsersPostApiArg = {\r\n    //   userCreate: {\r\n    //     username,\r\n    //     email,\r\n    //     industry,\r\n    //     password\r\n    //   }\r\n    // };\r\n\r\n    // try {\r\n    //   const credentials = await toast.promise(\r\n    //     createUser(createUserApiUsersPostApiArg).unwrap(),\r\n    //     {\r\n    //       pending: 'Aguarde...',\r\n    //       success: 'Bem vindo!'\r\n    //     }\r\n    //   );\r\n\r\n    //   dispatch(\r\n    //     setCredentials({ username: email, token: credentials.access_token })\r\n    //   );\r\n    //   resetControls();\r\n    //   navigate('/inventories/list');\r\n    // } catch (error) {\r\n    //   setSuccessful(false);\r\n    //   toast.dismiss();\r\n    //   toast.error(error.data.detail);\r\n    // }\r\n\r\n    // MOCK\r\n    dispatch(\r\n      setCredentials({ username: email, token: password })\r\n    );\r\n    toast.success('Bem vindo!');\r\n    navigate('/inventories/list');\r\n  };\r\n\r\n  const validateUser = (user: User) => {\r\n    let valid = true;\r\n    if (!user.name) {\r\n      setUserNameError({\r\n        message: 'Nome é obrigatório',\r\n        isError: true\r\n      });\r\n      valid = false;\r\n    }\r\n\r\n    if (!user.email) {\r\n      setEmailError({\r\n        message: 'E-mail é obrigatório',\r\n        isError: true\r\n      });\r\n      valid = false;\r\n    }\r\n\r\n    if (!user.password) {\r\n      setPasswordError({\r\n        message: 'Senha é obrigatório',\r\n        isError: true\r\n      });\r\n      valid = false;\r\n    }\r\n\r\n    return valid;\r\n  };\r\n\r\n  const resetControls = () => {\r\n    setUsername('');\r\n    setEmail('');\r\n    setPassword('');\r\n    setIndustry('');\r\n    setEmailError({ message: '', isError: false });\r\n    setPasswordError({ message: '', isError: false });\r\n    setUserNameError({ message: '', isError: false });\r\n    setIndustryError({ message: '', isError: false });\r\n  };\r\n\r\n  const handleChangeIndustry = (event) => {\r\n    setIndustry(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Card>\r\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" mt={2}>\r\n          <Logo />\r\n        </Box>\r\n\r\n        <CardContent>\r\n          <form onSubmit={handleSubmit}>\r\n            <Box\r\n              sx={{\r\n                '& .MuiTextField-root': { m: 1, width: '98%' }\r\n              }}\r\n            >\r\n              <TextField\r\n                error={usernameError?.isError}\r\n                required\r\n                id=\"username\"\r\n                label={\r\n                  usernameError.message === '' ? 'Nome' : usernameError.message\r\n                }\r\n                placeholder=\"Nome\"\r\n                value={username}\r\n                onChange={(event) => setUsername(event.target.value)}\r\n              />\r\n            </Box>\r\n            {/* <Box sx={{ m: 1, width: '98%' }}>\r\n              <FormControl fullWidth>\r\n                <Select\r\n                  error={industryError?.isError}\r\n                  required\r\n                  labelId=\"industry\"\r\n                  id=\"industry\"\r\n                  label=\"industry\"\r\n                  value={industry}\r\n                  displayEmpty\r\n                  input={<OutlinedInput />}\r\n                  onChange={handleChangeIndustry}\r\n                  MenuProps={{ PaperProps: { sx: { maxHeight: 250 } } }}\r\n                >\r\n                  <MenuItem disabled value=\"\">\r\n                    <em>Área de atuação</em>\r\n                  </MenuItem>\r\n                  {industryOptions.map((name) => (\r\n                    <MenuItem key={name} value={name}>\r\n                      {name}\r\n                    </MenuItem>\r\n                  ))}\r\n                </Select>\r\n              </FormControl>\r\n            </Box> */}\r\n            <Box\r\n              sx={{\r\n                '& .MuiTextField-root': { m: 1, width: '98%' }\r\n              }}\r\n            >\r\n              <TextField\r\n                error={emailError?.isError}\r\n                required\r\n                id=\"email\"\r\n                label={\r\n                  emailError.message === '' ? 'E-mail' : emailError.message\r\n                }\r\n                placeholder=\"E-mail\"\r\n                type=\"email\"\r\n                value={email}\r\n                onChange={(event) => setEmail(event.target.value)}\r\n              />\r\n            </Box>\r\n            <Box\r\n              sx={{\r\n                '& .MuiTextField-root': { m: 1, width: '98%' }\r\n              }}\r\n            >\r\n              <TextField\r\n                error={passwordError?.isError}\r\n                required\r\n                id=\"password\"\r\n                label={\r\n                  passwordError.message === '' ? 'Senha' : passwordError.message\r\n                }\r\n                placeholder=\"Senha\"\r\n                type=\"password\"\r\n                value={password}\r\n                onChange={(event) => setPassword(event.target.value)}\r\n              />\r\n            </Box>\r\n\r\n            <Box sx={{ '& button': { m: 1, width: '100%' }, width: '98%' }}>\r\n              <div>\r\n                <Button size=\"large\" variant=\"contained\" type=\"submit\">\r\n                  Cadastrar\r\n                </Button>\r\n              </div>\r\n            </Box>\r\n          </form>\r\n          <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\r\n            <p>\r\n              Já é cadastrado? <a href=\"/login\">Clique aqui para fazer o login</a>\r\n            </p>\r\n          </Box>\r\n        </CardContent>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SignUpForm;\r\n","import { Helmet } from 'react-helmet-async';\r\nimport PageHeader from './PageHeader';\r\nimport PageTitleWrapper from '../../../../components/PageTitleWrapper';\r\nimport { Grid, Container } from '@mui/material';\r\nimport Footer from '../../../../components/Footer';\r\nimport SignUpForm from './SignUpForm';\r\n\r\nconst UserSingUp = () => {\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      alignItems=\"stretch\"\r\n      sx={{ height: '100%' }}\r\n    >\r\n      <Helmet>\r\n        <title>Cadastro</title>\r\n      </Helmet>\r\n      <Container maxWidth=\"sm\">\r\n        <Grid>\r\n          <SignUpForm />\r\n        </Grid>\r\n        <Footer />\r\n      </Container>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default UserSingUp;\r\n","import {\r\n  createApi,\r\n  BaseQueryFn,\r\n  FetchArgs,\r\n  fetchBaseQuery,\r\n  FetchBaseQueryError\r\n} from '@reduxjs/toolkit/query/react';\r\nimport { checkIfStatusIsForbidden } from 'src/features/auth/authRedirect';\r\nimport { config } from '../config';\r\nimport { RootState } from '../store';\r\n// var qs = require('qs');\r\nimport qs from 'qs';\r\n\r\nconst baseQuery = fetchBaseQuery({\r\n  baseUrl: config.DR_HERANCA_API,\r\n  prepareHeaders: (headers, { getState }) => {\r\n    // By default, if we have a token in the store, let's use that for authenticated requests\r\n    const token = (getState() as RootState).auth.token;\r\n    if (token) {\r\n      headers.set('authorization', `Bearer ${token}`);\r\n    }\r\n    return headers;\r\n  },\r\n  paramsSerializer: (params) => {\r\n    return qs.stringify(params);\r\n  }\r\n});\r\n\r\nconst baseQueryWithAuthCheck: BaseQueryFn<\r\n  string | FetchArgs,\r\n  unknown,\r\n  FetchBaseQueryError\r\n> = async (args, api, extraOptions) => {\r\n  let result = await baseQuery(args, api, extraOptions);\r\n  if (result.error) {\r\n    checkIfStatusIsForbidden(result.error);\r\n  }\r\n  return result;\r\n};\r\n\r\nexport const emptySplitApi = createApi({\r\n  reducerPath: 'emptySplitApi',\r\n  baseQuery: baseQueryWithAuthCheck,\r\n  endpoints: () => ({})\r\n});\r\n"],"names":["FooterWrapper","styled","Box","_ref","theme","concat","spacing","Footer","_jsx","children","Container","maxWidth","py","display","xs","md","alignItems","textAlign","justifyContent","Typography","variant","Tooltip","title","arrow","style","paddingTop","paddingBottom","paddingLeft","paddingRight","alt","width","src","injectedRtkApi","api","injectEndpoints","endpoints","build","testTokenApiLoginTestTokenPost","mutation","query","url","method","createUserApiUsersPost","queryArg","body","userCreate","readUserMeApiUsersMeGet","updateUserMeApiUsersMePut","userUpdate","readGeocodesApiGeocodeGet","params","skip","limit","overrideExisting","useTestTokenApiLoginTestTokenPostMutation","useCreateUserApiUsersPostMutation","useReadUserMeApiUsersMeGetQuery","useUpdateUserMeApiUsersMePutMutation","useReadGeocodesApiGeocodeGetQuery","SignUpForm","username","setUsername","useState","email","setEmail","password","setPassword","setSuccessful","createUser","industry","setIndustry","dispatch","useDispatch","navigate","useNavigate","usernameError","setUserNameError","isError","message","undefined","emailError","setEmailError","passwordError","setPasswordError","industryError","setIndustryError","Grid","_jsxs","Card","mt","Logo","CardContent","onSubmit","async","e","preventDefault","toast","dismiss","setCredentials","token","success","sx","m","TextField","error","required","id","label","placeholder","value","onChange","event","target","type","Button","size","href","UserSingUp","container","direction","height","Helmet","baseQuery","fetchBaseQuery","baseUrl","config","DR_HERANCA_API","prepareHeaders","headers","getState","auth","set","paramsSerializer","qs","emptySplitApi","createApi","reducerPath","args","extraOptions","result","checkIfStatusIsForbidden"],"sourceRoot":""}